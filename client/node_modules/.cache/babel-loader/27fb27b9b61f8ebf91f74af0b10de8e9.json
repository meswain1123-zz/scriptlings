{"ast":null,"code":"import _regeneratorRuntime from \"/Users/matthewswain/Desktop/dev/experimentation/scriptlings/client/node_modules/@babel/runtime/regenerator\";\nimport _objectSpread from \"/Users/matthewswain/Desktop/dev/experimentation/scriptlings/client/node_modules/@babel/runtime/helpers/esm/objectSpread\";\nimport _asyncToGenerator from \"/Users/matthewswain/Desktop/dev/experimentation/scriptlings/client/node_modules/@babel/runtime/helpers/esm/asyncToGenerator\";\n\nfunction logErrorReason(reason) {\n  // log the error reason but keep the rejection\n  console.log('Response error reason:', reason);\n  return Promise.reject(reason);\n} // This is our special type of Error that represents\n// when a request got a 401 Unauthorized response\n\n\nexport function UnauthorizedError(message) {\n  this.name = 'UnauthorizedError';\n  this.message = message;\n}\nUnauthorizedError.prototype = new Error();\n\nfunction checkStatus(response) {\n  if (response.status >= 200 && response.status < 300) {\n    return response;\n  } else if (response.status === 401) {\n    var unauthorizedError = new UnauthorizedError(response.statusText);\n    unauthorizedError.response = response;\n    return Promise.reject(unauthorizedError);\n  } else {\n    var error = new Error(response.statusText);\n    error.response = response;\n    return Promise.reject(error);\n  }\n}\n\nexport function fetchData(_x) {\n  return _fetchData.apply(this, arguments);\n}\n\nfunction _fetchData() {\n  _fetchData = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee(path) {\n    var options,\n        _args = arguments;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            options = _args.length > 1 && _args[1] !== undefined ? _args[1] : {};\n            _context.next = 3;\n            return fetch(\"http://localhost:5000\".concat(path), _objectSpread({\n              mode: 'cors',\n              credentials: 'include'\n            }, options, {\n              headers: _objectSpread({\n                Accept: 'application/json'\n              }, options.headers)\n            })).then(checkStatus).catch(logErrorReason);\n\n          case 3:\n            return _context.abrupt(\"return\", _context.sent);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, this);\n  }));\n  return _fetchData.apply(this, arguments);\n}\n\nexport function postData(_x2, _x3) {\n  return _postData.apply(this, arguments);\n}\n\nfunction _postData() {\n  _postData = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee2(path, data) {\n    var options,\n        _args2 = arguments;\n    return _regeneratorRuntime.wrap(function _callee2$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            options = _args2.length > 2 && _args2[2] !== undefined ? _args2[2] : {};\n            _context2.next = 3;\n            return fetch(\"\".concat(path), _objectSpread({\n              mode: 'cors',\n              credentials: 'include'\n            }, options, {\n              headers: _objectSpread({\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n              }, options.headers),\n              method: 'POST',\n              body: JSON.stringify(data)\n            })).then(checkStatus).catch(logErrorReason);\n\n          case 3:\n            return _context2.abrupt(\"return\", _context2.sent);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, _callee2, this);\n  }));\n  return _postData.apply(this, arguments);\n}\n\nexport function putData(_x4, _x5) {\n  return _putData.apply(this, arguments);\n}\n\nfunction _putData() {\n  _putData = _asyncToGenerator(\n  /*#__PURE__*/\n  _regeneratorRuntime.mark(function _callee3(path, data) {\n    var options,\n        _args3 = arguments;\n    return _regeneratorRuntime.wrap(function _callee3$(_context3) {\n      while (1) {\n        switch (_context3.prev = _context3.next) {\n          case 0:\n            options = _args3.length > 2 && _args3[2] !== undefined ? _args3[2] : {};\n            _context3.next = 3;\n            return fetch(\"\".concat(path), _objectSpread({\n              mode: 'cors',\n              credentials: 'include'\n            }, options, {\n              headers: _objectSpread({\n                Accept: 'application/json',\n                'Content-Type': 'application/json'\n              }, options.headers),\n              method: 'PUT',\n              body: JSON.stringify(data)\n            })).then(checkStatus).catch(logErrorReason);\n\n          case 3:\n            return _context3.abrupt(\"return\", _context3.sent);\n\n          case 4:\n          case \"end\":\n            return _context3.stop();\n        }\n      }\n    }, _callee3, this);\n  }));\n  return _putData.apply(this, arguments);\n}","map":{"version":3,"sources":["/Users/matthewswain/Desktop/dev/experimentation/scriptlings/client/src/api.js"],"names":["logErrorReason","reason","console","log","Promise","reject","UnauthorizedError","message","name","prototype","Error","checkStatus","response","status","unauthorizedError","statusText","error","fetchData","path","options","fetch","mode","credentials","headers","Accept","then","catch","postData","data","method","body","JSON","stringify","putData"],"mappings":"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","sourcesContent":["\nfunction logErrorReason(reason) {\n    // log the error reason but keep the rejection\n    console.log('Response error reason:', reason)\n    return Promise.reject(reason)\n  }\n  \n  // This is our special type of Error that represents\n  // when a request got a 401 Unauthorized response\n  export function UnauthorizedError(message) {\n    this.name = 'UnauthorizedError'\n    this.message = message\n  }\n  UnauthorizedError.prototype = new Error()\n  \n  function checkStatus(response) {\n    if (response.status >= 200 && response.status < 300) {\n        return response\n    } else if(response.status === 401) {\n        var unauthorizedError = new UnauthorizedError(response.statusText)\n        unauthorizedError.response = response;\n        return Promise.reject(unauthorizedError)\n    } else {\n        var error = new Error(response.statusText)\n        error.response = response\n        return Promise.reject(error)\n    }\n  }\n  \n  export async function fetchData(path, options={}) {\n    return await fetch(`http://localhost:5000${path}`, {\n        mode: 'cors',\n        credentials: 'include',\n        ...options,\n        headers: {\n            Accept: 'application/json',\n            ...options.headers,\n        },\n    })\n    .then(checkStatus)\n    .catch(logErrorReason);\n  }\n  \n  export async function postData(path, data, options={}) {\n      return await fetch(`${path}`, {\n          mode: 'cors',\n          credentials: 'include',\n          ...options,\n          headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json',\n              ...options.headers,\n          },\n          method: 'POST',\n          body: JSON.stringify(data)\n      })\n      .then(checkStatus)\n      .catch(logErrorReason);\n  }\n  \n  export async function putData(path, data, options={}) {\n      return await fetch(`${path}`, {\n          mode: 'cors',\n          credentials: 'include',\n          ...options,\n          headers: {\n              Accept: 'application/json',\n              'Content-Type': 'application/json',\n              ...options.headers,\n          },\n          method: 'PUT',\n          body: JSON.stringify(data)\n      })\n      .then(checkStatus)\n      .catch(logErrorReason);\n  }\n  "]},"metadata":{},"sourceType":"module"}